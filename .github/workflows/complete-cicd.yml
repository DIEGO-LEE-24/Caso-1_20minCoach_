name: Complete CI/CD Pipeline - 20minCoach

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'

jobs:
  # ===== DEVELOPMENT ENVIRONMENT =====
  development:
    name: 🔧 Development Build & Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Type checking
        run: npm run type-check

      - name: 🧹 Lint code
        run: npm run lint

      - name: 💅 Format check
        run: npm run format:check

      - name: 🧪 Run unit tests
        run: npm run test:coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

      - name: 🏗️ Build development
        run: npm run build
        env:
          NODE_ENV: development

  # ===== STAGING ENVIRONMENT =====
  staging:
    name: 🎭 Staging Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: []

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run full test suite
        run: npm run test:coverage

      - name: 🏗️ Build staging
        run: npm run build
        env:
          NODE_ENV: staging
          VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}

      - name: 📊 Generate bundle analysis
        run: npm run build -- --analyze

      - name: 🚀 Deploy to staging
        run: echo "Deploy to staging environment"
        # Aquí iría la lógica real de deployment a staging

  # ===== PRODUCTION ENVIRONMENT =====
  production:
    name: 🚀 Production Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [staging]
    environment: production

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies (production only)
        run: npm ci --only=production

      - name: 🧪 Run production tests
        run: npm test
        env:
          NODE_ENV: production

      - name: 🏗️ Build production
        run: npm run build
        env:
          NODE_ENV: production
          VITE_SUPABASE_URL: ${{ secrets.PROD_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.PROD_SUPABASE_ANON_KEY }}

      - name: 🔍 Security audit
        run: npm audit --audit-level moderate

      - name: 📦 Create deployment artifact
        run: tar -czf dist.tar.gz dist/

      - name: 🚀 Deploy to production
        run: echo "Deploy to production environment"
        # Aquí iría la lógica real de deployment a production

      - name: ✅ Deployment verification
        run: echo "Verify deployment health"

  # ===== QUALITY GATES =====
  quality-gates:
    name: 🛡️ Quality Gates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Type checking
        run: npm run type-check

      - name: 🧹 Lint with error reporting
        run: npm run lint

      - name: 🧪 Test with coverage threshold
        run: npm run test:coverage
        env:
          COVERAGE_THRESHOLD: 80

      - name: 🏗️ Build verification
        run: npm run build

      - name: 📊 Bundle size check
        run: |
          npm run build
          BUNDLE_SIZE=$(du -sk dist | cut -f1)
          echo "Bundle size: ${BUNDLE_SIZE}KB"
          if [ $BUNDLE_SIZE -gt 5120 ]; then
            echo "❌ Bundle size too large: ${BUNDLE_SIZE}KB > 5MB"
            exit 1
          fi
          echo "✅ Bundle size OK: ${BUNDLE_SIZE}KB"

  # ===== SECURITY SCAN =====
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📋 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
